# //NOTE:
#   - build context is alongside the .sln file so we can build our containers using class libraries in other folders. This enables each project to contain its Dockerfile yet access the nearby folders

version: "3"
services:
  api:
    container_name: "yournamespaceapi"
    build:
      context: ./
      dockerfile: ./Your.Namespace.Api/Dockerfile
      args:
        hello: "world"
    restart: "unless-stopped"
    ports:
      - "9080:9080"
      - "9081:9081"
    volumes:
      - ${HOME}/.aspnet/https:/https
    # depends_on:
    #     - identityserver
    environment:
      ASPNETCORE_ENVIRONMENT: Development

  identityserver:
    container_name: yournamespaceidentityserver
    build:
      context: ./
      dockerfile: ./Your.Namespace.IdentityServer/Dockerfile
      args:
        hello: "world"
    restart: "unless-stopped"
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    volumes:
      - ${HOME}/.aspnet/https:/https
    ports:
      - "9082:9082"
      - "9083:9083"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus/:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    restart: always
  #    deploy:
  #      placement:
  #        constraints:
  #          - node.hostname == ${HOSTNAME}
  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - prometheus
    #command:
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=P@ssw0rd
    restart: always
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 9085:8080
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - 9086:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
  #    deploy:
  #      placement:
  #        constraints:
  #          - node.hostname == ${HOSTNAME}

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: always
    deploy:
      mode: global
